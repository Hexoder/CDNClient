# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import cdn_pb2 as cdn__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in cdn_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CDNServiceStub(object):
    """The CDN service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFileMetadata = channel.unary_unary(
                '/cdn.CDNService/GetFileMetadata',
                request_serializer=cdn__pb2.FileRequest.SerializeToString,
                response_deserializer=cdn__pb2.FileMetadataResponse.FromString,
                _registered_method=True)
        self.GetFileContent = channel.unary_stream(
                '/cdn.CDNService/GetFileContent',
                request_serializer=cdn__pb2.FileRequest.SerializeToString,
                response_deserializer=cdn__pb2.FileContentResponse.FromString,
                _registered_method=True)
        self.AssignToInstance = channel.unary_unary(
                '/cdn.CDNService/AssignToInstance',
                request_serializer=cdn__pb2.AssignUnassignRequest.SerializeToString,
                response_deserializer=cdn__pb2.AssignUnassignResponse.FromString,
                _registered_method=True)
        self.GetFileStatus = channel.unary_unary(
                '/cdn.CDNService/GetFileStatus',
                request_serializer=cdn__pb2.FileRequest.SerializeToString,
                response_deserializer=cdn__pb2.FileStatusResponse.FromString,
                _registered_method=True)
        self.UnassignFromInstance = channel.unary_unary(
                '/cdn.CDNService/UnassignFromInstance',
                request_serializer=cdn__pb2.AssignUnassignRequest.SerializeToString,
                response_deserializer=cdn__pb2.AssignUnassignResponse.FromString,
                _registered_method=True)
        self.UploadFile = channel.unary_unary(
                '/cdn.CDNService/UploadFile',
                request_serializer=cdn__pb2.File.SerializeToString,
                response_deserializer=cdn__pb2.FileUploadResponse.FromString,
                _registered_method=True)


class CDNServiceServicer(object):
    """The CDN service definition
    """

    def GetFileMetadata(self, request, context):
        """Fetch file metadata by UUID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFileContent(self, request, context):
        """Fetch file content by UUID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignToInstance(self, request, context):
        """Set Chunk File to a valid File
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFileStatus(self, request, context):
        """Get File Stat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnassignFromInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CDNServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFileMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFileMetadata,
                    request_deserializer=cdn__pb2.FileRequest.FromString,
                    response_serializer=cdn__pb2.FileMetadataResponse.SerializeToString,
            ),
            'GetFileContent': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFileContent,
                    request_deserializer=cdn__pb2.FileRequest.FromString,
                    response_serializer=cdn__pb2.FileContentResponse.SerializeToString,
            ),
            'AssignToInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignToInstance,
                    request_deserializer=cdn__pb2.AssignUnassignRequest.FromString,
                    response_serializer=cdn__pb2.AssignUnassignResponse.SerializeToString,
            ),
            'GetFileStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFileStatus,
                    request_deserializer=cdn__pb2.FileRequest.FromString,
                    response_serializer=cdn__pb2.FileStatusResponse.SerializeToString,
            ),
            'UnassignFromInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.UnassignFromInstance,
                    request_deserializer=cdn__pb2.AssignUnassignRequest.FromString,
                    response_serializer=cdn__pb2.AssignUnassignResponse.SerializeToString,
            ),
            'UploadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadFile,
                    request_deserializer=cdn__pb2.File.FromString,
                    response_serializer=cdn__pb2.FileUploadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cdn.CDNService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cdn.CDNService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CDNService(object):
    """The CDN service definition
    """

    @staticmethod
    def GetFileMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cdn.CDNService/GetFileMetadata',
            cdn__pb2.FileRequest.SerializeToString,
            cdn__pb2.FileMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFileContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/cdn.CDNService/GetFileContent',
            cdn__pb2.FileRequest.SerializeToString,
            cdn__pb2.FileContentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignToInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cdn.CDNService/AssignToInstance',
            cdn__pb2.AssignUnassignRequest.SerializeToString,
            cdn__pb2.AssignUnassignResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFileStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cdn.CDNService/GetFileStatus',
            cdn__pb2.FileRequest.SerializeToString,
            cdn__pb2.FileStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnassignFromInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cdn.CDNService/UnassignFromInstance',
            cdn__pb2.AssignUnassignRequest.SerializeToString,
            cdn__pb2.AssignUnassignResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cdn.CDNService/UploadFile',
            cdn__pb2.File.SerializeToString,
            cdn__pb2.FileUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
